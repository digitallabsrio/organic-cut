package main
import (
  "fmt"
  "strings"
  "math"
)

func FindDictionary(messages []string) string {
  // Step 0: Create data structures and find all unique letters.
  adjList := make(map[rune][]rune)
  counts := make(map[rune]int)
  for _, message := range messages {
    for _, c := range message {
        counts[c] = 0
        adjList[c] = make([]rune, 0)
    }
  }
  // Step 1: Find all edges.
  for i := 0; i < len(messages) - 1; i++ {
    message1 := messages[i]
    message2 := messages[i + 1]
    // Check that message2 is not a prefix of message1.
    if len(message1) > len(message2) && strings.Index(message1, message2) == 0{
        return ""
    }
    m1 := []rune(message1); m2 := []rune(message2)
    // Find the first non matching letter and insert the corresponding relation.
    length := int(math.Min(float64(len(m1)), float64((len(m2)))))
    for j := 0; j < length; j++ {
      if m1[j] != m2[j] {
          adjList[m1[j]] = append(adjList[m1[j]], m2[j])
          counts[m2[j]] = counts[m2[j]] + 1;
          break
      }
    }
  } 
  // Step 2: Breadth-first search.
  var result string
  queue := new(Queue)
  for char, itr := range counts {
    if itr == 0 {
        queue.Enqueue(char)
    }
  }
  for !queue.IsEmpty() {
    c := queue.Dequeue().(rune)
    result += string(c)
    for _, next := range adjList[c] {
        counts[next] = counts[next] - 1
        if counts[next] == 0 {
            queue.Enqueue(next)
        }
    }
  } 
  if len(result) < len(counts) {
      return ""
  }
  return result
}

func main() {
  // Example - 1
  messages := []string{"ac","ab","b"}
  fmt.Println("Dictionary = \"" + FindDictionary(messages) + "\"")

  // Example - 2
  messages = []string{"abc","ab"}
  fmt.Println("Dictionary = \"" + FindDictionary(messages) + "\"")
}