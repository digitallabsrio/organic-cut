package main
import (
  "fmt"
  "strconv"
)

type TreeNode struct{
    val int
    left *TreeNode
    right *TreeNode
}

func leftBoundary(node *TreeNode, boundary *[]int){
    if node == nil || (node.left == nil && node.right == nil){
        return
    }
    (*boundary) = append((*boundary), node.val)
    if node.left != nil {
        leftBoundary(node.left, boundary)
    } else {
        leftBoundary(node.right, boundary)
    }
}

func leaves(node *TreeNode, root *TreeNode, boundary *[]int){
    if node == nil{
        return
    }
    leaves(node.left, root, boundary)
    if node != root && node.left == nil && node.right == nil{
        (*boundary) = append((*boundary), node.val)
    }
    leaves(node.right, root, boundary)
}

func rightBoundary(node *TreeNode, boundary *[]int){
    if node == nil || (node.left == nil && node.right == nil){
        return
    }
    if node.right != nil {
        rightBoundary(node.right, boundary);
    } else {
        rightBoundary(node.left, boundary);
    }
    (*boundary) = append((*boundary), node.val)
}

func boundary(root *TreeNode) []int{  
    var boundary []int
    if root == nil {
        return boundary
    }
    boundary = append(boundary, root.val)
    leftBoundary(root.left, &boundary)
    leaves(root, root, &boundary)
    rightBoundary(root.right, &boundary)
    return boundary
}

func main() {
    // Driver Code
    bt := &TreeNode{val: 1}
    bt.left = &TreeNode{val: 2}
    bt.left.left = &TreeNode{val: 3}
    bt.left.right = &TreeNode{val: 4}
    bt.left.right.left = &TreeNode{val: 5}
    bt.right = &TreeNode{val: 6}
    bt.right.left = &TreeNode{val: 7}
    bt.right.left.right = &TreeNode{val: 9}
    bt.right.right = &TreeNode{val: 8}
    bt.right.right.right = &TreeNode{val: 10}

    print(boundary(bt))
}