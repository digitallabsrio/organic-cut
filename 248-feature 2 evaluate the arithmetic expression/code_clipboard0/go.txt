package main
import "fmt"

type Stack []int

func (s Stack) Push(v int) Stack {
    return append(s, v)
}

func (s Stack) Pop() (Stack, int) {
    l := len(s)
	if l == 0 {
		return s, -1
	}
    return s[:l-1], s[l-1]
}

func (s Stack) Top() int {
    l := len(s)
	return s[l - 1]
}

func (s Stack) Empty() bool {
	return len(s) == 0
}

func evaluateExpression(expression string) int{
    number, sign, output := 0, 1, 0
    var stack Stack
    for i := 0; i < len(expression); i++ {
        c := expression[i]
        if '0' <= c && c <= '9' {
            number = number * 10 + (int(c) - 48); //for consecutive digits 98 => 9x10 + 8 = 98
        } else if c == '-' || c == '+' { 
            output += number * sign
            if c == '-' {
                sign = -1
            } else {
                sign = 1
            }
            number = 0
        } else if c == '(' {
            stack = stack.Push(output)
            stack = stack.Push(sign)
            output = 0
            sign = 1
        } else if c == ')' {
            output += sign * number

            output *= stack.Top()
            stack, _ = stack.Pop()

            output += stack.Top()
            stack, _ = stack.Pop()

            number = 0
        }
    }
    return output + number * sign
}

func main() {
    expression := "{4 - (10 + 52) + 99}"
    fmt.Println(evaluateExpression(expression))
}