package main
import (
  "fmt"
  "container/list"
)

type Pair struct {
    first, second int
}

func totalTime(mainServerId int, parents, delays []int) int {
    n := len(parents)
    if n <= 1 {
        return 0
    }
    
    res := 0
    children := make(map[int][]int)

    var numbers []int
    for i := 0; i < len(parents); i++ {
        numbers = append(numbers, parents[i])
    }

    for index := 0; index < len(numbers); index++ {
        val := numbers[index]
        var tempList []int
        if _, ok := children[val]; ok {
            tempList = children[val]
        }
        tempList = append(tempList, index)
        children[val] = tempList
    }

    queue := list.New()
    queue.PushBack(Pair{mainServerId, delays[mainServerId]})

    for queue.Len() != 0 {
        node := queue.Front()
        queue.Remove(node)
        curr := node.Value.(Pair)
        curId := curr.first
        curTime := curr.second
        // calculate max
        if res < curTime {
            res = curTime
        }
        var temp []int
        if _, ok := children[curId]; ok {
            temp = children[curId]
        }
        for _, child := range temp {
            queue.PushBack(Pair{child, curTime + delays[child]})
        }
    }
    
    return res
}

func main() {
    mainServerId := 0
    parents := []int{-1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6}
    delays := []int{1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}

    fmt.Println(totalTime(mainServerId, parents, delays))
}