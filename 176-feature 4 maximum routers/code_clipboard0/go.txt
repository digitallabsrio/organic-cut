package main
import (
    "fmt"
    "math"
)
func dfs(grid [][]int, i int, j int, prevVal int, cache *[][]int) int{
    
    if i < 0 || j < 0 || i > len(grid) - 1 || j > len(grid[0]) - 1 {
        return 0
    } else if prevVal > grid[i][j] {
        return 0
    } else if (*cache)[i][j] != 0 {
        return (*cache)[i][j]
    }
    
    // Up
    pathUp :=  dfs(grid,i-1,j,grid[i][j], cache)
    // Down
    pathDown :=  dfs(grid,i+1,j,grid[i][j], cache) 
    // Left
    pathLeft :=  dfs(grid,i,j-1,grid[i][j], cache) 
    // Right
    pathRight :=  dfs(grid,i,j+1,grid[i][j], cache)
      

    max1 := int(math.Max(float64(pathUp), float64(pathDown)))
    max2 := int(math.Max(float64(pathLeft), float64(pathRight)))

    (*cache)[i][j] = 1 + int(math.Max(float64(max1), float64(max2)))
    
    return (*cache)[i][j]
}

func maximumRouters(grid [][]int) int{
    if len(grid) == 0{
        return 0
    }

    res := 0
    cache := make([][]int, len(grid))
    for i:=0; i < len(grid); i++ {
        cache[i] = make([]int, len(grid[0]))
    }

    for i := 0; i < len(grid); i++{
        for j := 0; j < len(grid[0]); j++{

            if cache[i][j] == 0 {
                prevVal := grid[i][j];
                dfs(grid,i,j,prevVal, &cache)
                res = int(math.Max(float64(cache[i][j]), float64(res)))
            }
        }
    }
    return res;
}

func main() {
    // Driver code
    grid := [][]int{{2,9,6}, {8,4,7}, {5,3,1}}
    fmt.Println("Maximum Routers are", maximumRouters(grid))
}