package main
import (
  "fmt"
  "math"
)

func DensestDeployment(Coordinates [][]int) int{
  res := math.MaxInt64
  x := make(map[int][]int)
  for _, p := range Coordinates{
    x[p[0]] = append(x[p[0]], p[1])
  }

  for i := 0; i < len(Coordinates); i++{
    for j := i + 1; j < len(Coordinates); j++{
      p := Coordinates[i][0]
      p2 := Coordinates[j][0]
      if p == p2 { continue }

      if len(x[p]) < 2 || len(x[p2]) < 2 { continue }
      y := Intersection(x[p], x[p2])
      for k := 1; k < len(y); k++{
        res = int(math.Min(float64(res), float64(int(math.Abs(float64((p2 - p) * (y[k] - y[k - 1])))))))
      }
    }
  }
  if res == math.MaxInt64 { return 0 } else { return res }
}

func Intersection(arr1 []int, arr2 []int) []int{
  counter := make(map[int]int)
	
	for _, i := range arr1 {
    if _, ok := counter[i]; ok{
      counter[i] = 1
    }else{
      counter[i]++
    }
		
	}

	intersection := make([]int, 0)

	for _, i := range arr2 {
		if counter[i] >= 1{
			intersection = append(intersection, i) 
		}
	}

	return intersection
}

func main(){
  // driver code

  // Example - 1
  coordinates := [][]int{{0, 3}, {2, 3}, {1, 2}, {0, 1}, {2, 1}};
  fmt.Println("Densest Deployment: ", DensestDeployment(coordinates))

  // Example - 2
  coordinates = [][]int{{0, 1}, {0, 3}, {3, 3}, {3, 1}, {5, 1}, {5, 3}};
  fmt.Println("Densest Deployment: ", DensestDeployment(coordinates))

  // Example - 3
  coordinates = [][]int{{1, 0}, {1, 3}, {3, 3}, {3, 0}};
  fmt.Println("Densest Deployment: ", DensestDeployment(coordinates))

  // Example - 4
  coordinates = [][]int{{0, 0}, {1, 3}, {3, 3}, {3, 0}};
  fmt.Println("Densest Deployment: ", DensestDeployment(coordinates))
}