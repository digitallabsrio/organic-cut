package main
import "fmt"

func dfs(node *TrieNode, grid [][]rune, row int, col int, result *[]string, word string){

    // Checking if we found the word
    if node.isWord {
        (*result) = append((*result), word)
        node.isWord = false
    }

    if 0 <= row && row < 5 && 0 <= col && col < 5{
        c := rune(grid[row][col])
        if _, ok := node.children[c]; ok && c != '#'{
            child := node.children[c]
            word += string(c)
            // Marking it as visited before exploration
            grid[row][col] = '#'

            offsets :=  [][]int{{0,1}, {1, 0}, {0, -1}, {-1, 0}}
            for _, offset := range offsets{
                rowOffset := offset[0]
                colOffset := offset[1]
                dfs(child, grid, row + rowOffset, col + colOffset, result, word);

            }
            // Resotoring state after exploration
            grid[row][col] = c;
        }
    }
}

func searchWords(grid [][]rune, words []string) []string{

    t := &Trie{root: &TrieNode{ALPHABET_SIZE: 26, children: make(map[rune]*TrieNode)}}
    var result []string
    // Inserting words in dictionary
    for _, word := range words{
        t.Insert(word)
    }
    word := ""
    // Calling dfs for all the cells in the grid
    for row := 0; row < 5; row++{
        for col := 0; col < 5; col++{
            dfs(t.root, grid, row, col, &result, word);
        }
    }
    return result
}


func main() {
    grid := [][]rune{{'B', 'S', 'L', 'I', 'M'}, {'R', 'I', 'L', 'M', 'O'}, {'O', 'L', 'I', 'E', 'O'}, {'R', 'Y', 'I', 'L', 'N'}, {'B', 'U', 'N', 'E', 'C'}}
    words := []string{"BUY", "SLICK", "SLIME", "ONLINE", "NOW"}
    print(searchWords(grid, words))
}