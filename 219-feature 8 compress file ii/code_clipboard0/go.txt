package main
import (
  "fmt"
)

func Compress(chars *[]byte) int{
  if len(*chars) <= 1{
      return len(*chars)
  } else{
    i, j := 0, 0
    for i < len(*chars) && j < len(*chars){
      c := *chars
      for j < len(*chars) && c[i] == c[j] {
        j += 1
      }
      if i + 1 != j {  // skip cases where ["a", "b", "b"..]
        *chars = delete(*chars, i + 1, j)
        if j - i < 10 {  
          *chars = insert(*chars, i + 1, byte(j-i))
          i, j = i + 2, i + 2
        } else{
          *chars = insert(*chars, i + 1, byte(int((j-i)/10)))
          *chars = insert(*chars, i + 2, byte((j-i) % 10))
          i, j = i + 3, i + 3
        }
      } else{
          i = j
      }
    }
  }

  return len(*chars)
}

func insert(s []byte, index int, val byte) []byte {
  s = append(s, ' ')
  copy(s[index+1:], s[index:])
  s[index] = val
  return s
}
func delete (s []byte, i int, j int) []byte{
  return append(s[:i], s[j:]...)
}
// Driver code
func main(){
  chars := []byte{'a','a','b','b','b','c','a','a','a','a'};
  result := Compress(&chars)
  for i := 0; i < result; i++ {
    if int(chars[i]) >= 0 && int(chars[i]) <= '9'{
      fmt.Print(int(chars[i]), " ")
     } else {
      fmt.Print(string(chars[i]), " ")
    }
  }
  
}