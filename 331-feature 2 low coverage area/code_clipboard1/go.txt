package main
import (
    "fmt"
    "math"
)

func maximumRowArea(heights []int) int {
    var stack Stack

    // Initialize stack with the default L value
    stack = stack.Push(-1)
    
    maxArea := 0
    for i := 0; i < len(heights); i++ {
        for stack.Top() != -1 && heights[stack.Top()] >= heights[i] {
            top := stack.Top()
            stack, _ = stack.Pop()
            height := heights[top]
            R := i
            L := stack.Top()
            width := (R - L) - 1
            area := height * width

            maxArea = int(math.Max(float64(maxArea), float64(area)))
        }

        stack = stack.Push(i)

    }
    
    // Case when no valid R value exists anymore
    for stack.Top() != -1 {
        top := stack.Top()
        stack, _ = stack.Pop()
        height := heights[top]
        R := len(heights)
        L := stack.Top()
        width := (R - L) - 1
        area := height * width

        maxArea = int(math.Max(float64(maxArea), float64(area)))
    }

    return maxArea
}

func lowCoverage(matrix [][]string) int {
    if len(matrix) == 0 {
        return 0
    }
    maxArea := 0
    dp := make([]int, len(matrix[0]))

    for i := 0; i < len(matrix); i++ {
        for j := 0; j < len(matrix[0]); j++ {

            // update the state of this row's dp array using the last row's dp array
            // by keeping track of the number of consecutive ones
            if matrix[i][j] == "1" {
                dp[j] = dp[j] + 1
            } else{
                dp[j] = 0
            }
        }
        // update maxArea with the maximum area from this row's dp array
        maxArea = int(math.Max(float64(maxArea), float64(maximumRowArea(dp))))
    } 
    return maxArea
}

func main() {
    // Driver code
    
    mall := [][]string{{"1","0","0","1","1","1"}, {"1","0","1","1","0","1"}, {"0","1","1","1","1","1"}, {"0","0","1","1","1","1"}}

    fmt.Printf("Maximum Low coverage area is %v units\n", lowCoverage(mall))
}