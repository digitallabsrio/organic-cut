package main
import (
    "fmt"
    "math"
)

func maximumRowArea(heights []int) int {
    var stack Stack

    // Initialize stack with the default L value
    stack = stack.Push(-1)
    
    maxArea := 0
    for i := 0; i < len(heights); i++ {
        for stack.Top() != -1 && heights[stack.Top()] >= heights[i] {
            top := stack.Top()
            stack, _ = stack.Pop()
            height := heights[top]
            R := i
            L := stack.Top()
            width := (R - L) - 1
            area := height * width

            maxArea = int(math.Max(float64(maxArea), float64(area)))
        }

        stack = stack.Push(i)

    }
    
    // Case when no valid R value exists anymore
    for stack.Top() != -1 {
        top := stack.Top()
        stack, _ = stack.Pop()
        height := heights[top]
        R := len(heights)
        L := stack.Top()
        width := (R - L) - 1
        area := height * width

        maxArea = int(math.Max(float64(maxArea), float64(area)))
    }

    return maxArea
}
func main() {
    // Driver code
    
    heights := []int{2,1,5,6,2,3}
    fmt.Printf("Maximum Row Area: %v\n", maximumRowArea(heights))
}