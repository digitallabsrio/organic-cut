package main
import (
    "fmt"
    "math"
)

type Pair struct {
    first, second int
}

func dfs(x int, y int, moves map[Pair]int) int{
    temp := Pair{x, y}
    if i, ok := moves[temp]; ok {
        return i
    }
    // take abs because it's symmetric
    pos1 := dfs(int(math.Abs(float64(x-2))),int(math.Abs(float64(y-1))), moves)
    pos2 := dfs(int(math.Abs(float64(x-1))),int(math.Abs(float64(y-2))), moves)

    res := int(math.Min(float64(pos1), float64(pos2))) + 1 
    moves[temp] = res
    return res
}


func minimumKnightMoves(x, y int) int{
    
    moves := make(map[Pair]int)
    // Base Cases
    moves[Pair{0, 0}] = 0
    moves[Pair{1,1}], moves[Pair{2,0}], moves[Pair{0,2}] = 2, 2, 2
    moves[Pair{1,0}], moves[Pair{0,1}] = 3, 3
	
    return dfs(int(math.Abs(float64(x))), int(math.Abs(float64(y))), moves)
}

func main() {
    // Driver Code
    fmt.Println(minimumKnightMoves(2, 1))
    fmt.Println(minimumKnightMoves(2, 0))
    fmt.Println(minimumKnightMoves(3, 1))
    fmt.Println(minimumKnightMoves(5, 5))
}