package main
import (
  "fmt"
)

type TreeNode struct{
    val int
    left *TreeNode
    right *TreeNode
}

func flipEquiv(root1, root2 *TreeNode) bool {
    if root1 == nil && root2 == nil {
        return true
    }
    if root1 == nil || root2 == nil || root1.val != root2.val {
        return false
    }

    return (flipEquiv(root1.left, root2.left) && flipEquiv(root1.right, root2.right) ||
            flipEquiv(root1.left, root2.right) && flipEquiv(root1.right, root2.left));
}

func main() {
    // Driver code
    // Example - 1
    fmt.Println(flipEquiv(nil, nil))

    // Example - 2
    root := &TreeNode{val: 1}
    root.left = &TreeNode{val: 2}
    root.right = &TreeNode{val: 3}
    root.left.left = &TreeNode{val: 4}
    root.left.right = &TreeNode{val: 5}

    root.right.left = &TreeNode{val: 6}
    root.right.right = &TreeNode{val: 9}

    root1 := &TreeNode{val: 1}
    root1.right = &TreeNode{val: 3}
    root1.left = &TreeNode{val: 2}
    root1.right.left = &TreeNode{val: 6}
    root1.right.right = &TreeNode{val: 9}
    root1.left.left = &TreeNode{val: 4}
    root1.left.right = &TreeNode{val: 5}
    root1.left.right.left = &TreeNode{val: 7}
    root1.left.right.right =&TreeNode{val: 8}


    root2 := &TreeNode{val: 1}
    root2.left = &TreeNode{val: 3}
    root2.right = &TreeNode{val: 2}
    root2.left.right = &TreeNode{val: 6}
    root2.left.left = &TreeNode{val: 9}
    root2.right.left = &TreeNode{val: 4}
    root2.right.right = &TreeNode{val: 5}
    root2.right.right.right = &TreeNode{val: 7}
    root2.right.right.left = &TreeNode{val: 8}
    fmt.Println(flipEquiv(root1, root2))

    // Example - 3
    root3 := &TreeNode{val: 1}
    root3.right = &TreeNode{val: 4}
    root3.left = &TreeNode{val: 3}

    root4 := &TreeNode{val: 1}
    fmt.Println(flipEquiv(root3, root4))
}