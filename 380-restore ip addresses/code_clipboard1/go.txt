package main
import (
  "fmt"
  "math"
  "strconv"
  "strings"
)

func restoreIpAddresses(s string) []string{
    result := []string{}
    segments := []string{}
    backtrack(s, -1, 3, &segments, &result);
    return result;
}

func backtrack(s string, prevPos int, dots int, segments *[]string, result *[]string) {
  /*
        prevPos : the position of the previously placed dot
        dots : number of dots to place
  */
  // The current dot currPos could be placed 
  // in a range from prevPos + 1 to prevPos + 4.
  // The dot couldn't be placed 
  // after the last character in the string.
  size := len(s)
  maxPos := int(math.Min(float64(size - 1), float64(prevPos + 4)))
  for currPos := prevPos + 1; currPos < maxPos; currPos++ {
    segment := s[(prevPos + 1):(currPos + 1)]
    if valid(segment) {
      *segments = append(*segments, segment)  // place dot
      if dots - 1 == 0 {     // if all 3 dots are placed
        updateSegment(s, currPos, segments, result)  // add the solution to output 
      } else {
        backtrack(s, currPos, dots - 1, segments, result)  // continue to place dots
      }
      seg := *segments
      *segments = seg[: len(seg) - 1]  // remove the last placed dot 
    }
  }
}

func updateSegment(s string, currPos int, segments *[]string, result *[]string) {
  /*
    updateSegment will append the current list of segments 
    to the list of result.
  */
  segment := s[currPos + 1 :]
  if (valid(segment)) {
    *segments = append(*segments, segment)
    // Utility function to concate the entries of the segments list
    // separated by the dot delimeter.
    ip := strings.Join(*segments, ".");
    *result = append(*result, ip)
    seg := *segments
    *segments = seg[: len(seg) - 1]
  }
}

func valid(segment string) bool {
  /* 
    Check if the current segment is valid for either 
    one of following conditions:
    1. Check if the current segment is less or equal to 255.  
    2. Check if the length of segment is 1. the first character of segment 
      can be `0` only if length of segment is 1.
  */
  m := len(segment)
  if (m > 3){
    return false
  }
  if len(segment) >= 1 && segment[0] != '0' {
    num, _ := strconv.Atoi(segment)
    return num <= 255
  } else {
    return m == 1
  }
}

func main() {
  // Driver Code

  // Example - 1 
  str := "0000";
  result := restoreIpAddresses(str);
  print(result);

  // Example - 2
  str = "25525511135";
  result = restoreIpAddresses(str);
  print(result);

  // Example - 3
  str = "12121212";
  result = restoreIpAddresses(str);
  print(result);
}