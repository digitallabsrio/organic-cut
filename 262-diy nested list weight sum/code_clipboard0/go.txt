package main

type NestedInteger struct{
    list []*NestedInteger
    integer *int
}

// @return true if this NestedInteger holds a single integer, rather than a nested list.
func (n *NestedInteger) IsInteger() bool{
    if n.integer != nil {
        return true
    }
    return false
}

// @return the single integer that this NestedInteger holds, if it holds a single integer
// Return undefined if this NestedInteger holds a nested list
func (n *NestedInteger) GetInteger() int{
    return (*n.integer)
}

// Set this NestedInteger to hold a single integer.
func (n *NestedInteger) SetInteger(value int){
    n.list = []*NestedInteger{}
    n.integer = &value
}

// Set this NestedInteger to hold a nested list and adds a nested integer to it.
func (n *NestedInteger) PushBack(ni *NestedInteger){
    if n.integer != nil{
        n.list = append(n.list, newNestedInteger((*n.integer)))
        n.integer = nil
    }

    n.list = append(n.list, ni)
}

// @return the nested list that this NestedInteger holds, if it holds a nested list
// The result is undefined if this NestedInteger holds a single integer
func (n *NestedInteger) GetList() []*NestedInteger{
    return n.list
}

func newNestedInteger(val int) *NestedInteger {
    return &NestedInteger{integer: &val}
}