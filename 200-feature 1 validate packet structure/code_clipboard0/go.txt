package main
import (
  "fmt"
)

func validatePacketStructure(data []int) bool {

  // Number of bytes in the current packet
  numberOfBytesToProcess := 0

  // Masks to check two most significant bits in a byte.
  mask1 := 1 << 7
  mask2 := 1 << 6

  // For each integer in the data array.
  for i := 0; i < len(data); i++ {
    // If this is the case then we are to start processing a new packet.
    if numberOfBytesToProcess == 0 {
      mask := 1 << 7
      for (mask & data[i]) != 0 {
        numberOfBytesToProcess += 1
        mask = mask >> 1
      }
      // 1 byte packets
      if numberOfBytesToProcess == 0 {
        continue
      }
      // Invalid scenarios according to the rules of the problem.
      if (numberOfBytesToProcess > 4 || numberOfBytesToProcess == 1) {
        return false
      }
    } else {
      // data[i] should have most significant bit set and
      // second most significant bit unset. So, we use the two masks
      // to make sure this is the case.
      if (!((data[i] & mask1) != 0 && (mask2 & data[i]) == 0)) {
        return false
      }
    }
    // We reduce the number of bytes to process by 1 after each integer.
    numberOfBytesToProcess -= 1
  }
  // This is for the case where we might not have the complete data for
  // a particular packet.
  return numberOfBytesToProcess == 0
}

func main() {
  // driver code

  // Example - 1
  data := []int {193, 129, 3}
  fmt.Println(validatePacketStructure(data))

  // Example - 2
  data = []int {230, 129, 7}
  fmt.Println(validatePacketStructure(data))


  // Example - 3
  data = []int {248, 129, 129, 129, 129}
  fmt.Println(validatePacketStructure(data))
}