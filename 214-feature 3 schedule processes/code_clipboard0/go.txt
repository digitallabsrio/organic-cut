package main
import (
    "fmt"
    "container/list"
)

func scheduleProcess(vertices int, edges [][]int) []int{
    var sortedOrder []int
    if vertices <= 0 {
        return sortedOrder
    }

    // a. Initialize the graph
    
    inDegree := make(map[int]int) // count of incoming edges for every vertex
    graph := make(map[int][]int) // adjacency list graph
    for i := 0; i < vertices; i++ {
        inDegree[i] = 0
        graph[i] = []int{}
    }

    // b. Build the graph
    for i := 0; i < len(edges); i++ {
        parent, child := edges[i][1], edges[i][0]
        graph[parent] = append(graph[parent], child) // put the child into it's parent's list
        inDegree[child] = inDegree[child] + 1; // increment child's inDegree
    }

    // c. Find all sources i.e., all vertices with 0 in-degrees
    sources := list.New()
    for key, val := range inDegree { 
        // itr works as a pointer to pair<int, int> 
        // type itr->first stores the key part  and 
        // itr->second stroes the value part 
        if(val == 0){
            sources.PushBack(key)
        } 
    }

    // d. For each source, add it to the sortedOrder and subtract one from all of its children's in-degrees
    // if a child's in-degree becomes zero, add it to the sources queue
    for sources.Len() != 0 {
        front := sources.Front()
        vertex := front.Value.(int)
        sources.Remove(front)
        sortedOrder = append(sortedOrder, vertex)
        children := graph[vertex] // get the node's children to decrement their in-degrees
        for _, child := range children {
            inDegree[child] = inDegree[child] - 1
            if (inDegree[child] == 0){
                sources.PushBack(child)
            }
        }
    }

    if len(sortedOrder) != vertices {
        // topological sort is not possible as the graph has a cycle
        sortedOrder = []int{}
    } 
    return sortedOrder
}

func main() {
    // Driver Code
    n := 4
    dependencies := [][]int{{1,0},{2,0},{3,1},{3,2}}
    print(scheduleProcess(n, dependencies))
}