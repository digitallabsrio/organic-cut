package main
import (
    "fmt"
)

func multiply(A [][]int, B [][]int) [][]int {
    
    if len(A) == 0 || len(B) == 0 || len(A[0]) != len(B) {
        return [][]int{}
    }
        
    n := len(A)
    m := len(B)
    p := len(B[0])
    
    mapA := make(map[int]int)
    mapB := make(map[int]int)
    
    C := make([][]int, len(A))
    for i := 0; i < len(C); i++ {
        C[i] = make([]int, len(B[0]))
    }
    for i := 0; i < n; i++{
        for j := 0; j < m; j++{
            if A[i][j] != 0 {
                mapA[i * m + j] = A[i][j]
            }
        }
    }

     for i := 0; i < m; i++{
        for j := 0; j < p; j++{
            if B[i][j] != 0 {
                mapB[i * p + j] = B[i][j]
            }
        }
    }

    for first, second := range mapA {
        for j := 0; j < p; j++ {
            if val, ok := mapB[j + p * (first % m)]; ok {
                C[first / m][j] += second * val
            }
        }
    }
    return C
}

func main() {
    // Driver Code
    A := [][]int{{1, 0, 0}, {0, 1, 3}}
    B := [][]int{{5, 0, 0}, {0, 0, 0}, {3, 0, 2}}
    print(multiply(A, B))

    D := [][]int{{1, -5}}
    E := [][]int{{12}, {-1}}
    print(multiply(D, E))
}